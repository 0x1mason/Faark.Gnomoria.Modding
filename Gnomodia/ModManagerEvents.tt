<#
/*
 *  Gnomodia
 *
 *  Copyright © 2015 Alexander Krivács Schrøder (https://alexanderschroeder.net/)
 *
 *   This program is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
 #>
<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="EnvDte" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#

var visualStudio = (this.Host as IServiceProvider).GetService(typeof(EnvDTE.DTE))
                    as EnvDTE.DTE;
var project = visualStudio.Solution.FindProjectItem(this.Host.TemplateFile)
                                   .ContainingProject as EnvDTE.Project;

var toolName = "ModManagerEvents";
var toolVersion = "1.1";

#>
/*
 *  Gnomodia
 *
 *  Copyright © 2015 Alexander Krivács Schrøder (https://alexanderschroeder.net/)
 *
 *   This program is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

 /*
  * This file is auto-generated based on the non-abstract classes defined
  * under the "Events" folder. Do not edit directly. If you have added a
  * new event, and want to re-generate this file, right-click on the file
  * named ModManagerEvents.tt and select "Run Custom Tool".
  */

namespace Gnomodia
{
<#
    var eventClasses = GetEventClasses(project);
#>
   internal partial interface IModManager
   {
<#
    foreach(var eventClassEntry in eventClasses)
    {
        var eventClass = eventClassEntry.Value;
        if (eventClass.IsAbstract)
            continue;

        var eventClassName = eventClass.Name;
        var eventName = eventClassName.Replace("EventArgs", "Event");
#>
        [System.CodeDom.Compiler.GeneratedCode("<#=toolName#>", "<#=toolVersion#>")]
        void On<#=eventName#>(Events.<#=eventClassName#> args);

<#
	}
#>
   }

   internal partial class ModManager
   {
<#
    var eventDelegates = new Dictionary<string, string>();
    var eventNames = new Dictionary<string, string>();
    foreach(var eventClassEntry in eventClasses)
    {
        var eventClass = eventClassEntry.Value;
        if (eventClass.IsAbstract)
            continue;

        var eventClassName = eventClass.Name;
        var delegateName = eventClassName.Replace("EventArgs", "");
        eventDelegates.Add(eventClassEntry.Key, delegateName);
#>
        [System.CodeDom.Compiler.GeneratedCode("<#=toolName#>", "<#=toolVersion#>")]
        internal delegate void <#=delegateName#>(object sender, Events.<#=eventClassName#> args);

<#
    }

    foreach(var eventClassEntry in eventClasses)
    {
        var eventClass = eventClassEntry.Value;
        if (eventClass.IsAbstract)
            continue;

        var eventClassName = eventClass.Name;
        var delegateName = eventDelegates[eventClassEntry.Key];
        var eventName = eventClassName.Replace("EventArgs", "Event");
        eventNames.Add(eventClassEntry.Key, eventName);
#>
        [System.CodeDom.Compiler.GeneratedCode("<#=toolName#>", "<#=toolVersion#>")]
        private event <#=delegateName#> <#=eventName#>;
        
        [System.CodeDom.Compiler.GeneratedCode("<#=toolName#>", "<#=toolVersion#>")]
        public void On<#=eventName#>(Events.<#=eventClassName#> args)
        {
            <#=delegateName#> handler = <#=eventName#>;
            if (handler != null)
                handler(this, args);
        }

<#
    }
#>
        [System.CodeDom.Compiler.GeneratedCode("<#=toolName#>", "<#=toolVersion#>")]
        private void HookUpEvents(IMod mod, System.Collections.Generic.List<System.Reflection.MethodInfo> eventMethods)
        {
<#
    foreach(var eventClassEntry in eventClasses)
    {
        var eventClass = eventClassEntry.Value;
        if (eventClass.IsAbstract)
            continue;

        var eventClassName = eventClass.Name;
        var delegateName = eventDelegates[eventClassEntry.Key];
        var eventName = eventNames[eventClassEntry.Key];
        var delegateVariable = ToVariableName(delegateName + "Delegate");
#>
            foreach (<#=delegateName#> <#=delegateVariable#> in GetEventDelegates<Events.<#=eventClassName#>, <#=delegateName#>>(eventMethods, mod))
                <#=eventName#> += <#=delegateVariable#>;

<#
    }
#>         
        }
    }
}

<#+
    public string ToVariableName(string className)
    {
        return new string(new[]{char.ToLower(className.First())}.Concat(className.Skip(1)).ToArray());
    }

    public Dictionary<string, EnvDTE.CodeClass> GetEventClasses(EnvDTE.Project project)
    {
        Dictionary<string, EnvDTE.CodeClass> ret = new Dictionary<string, EnvDTE.CodeClass>();
        foreach(EnvDTE.ProjectItem item in GetProjectItemsRecursively(project.ProjectItems))
        {
            EnvDTE.ProjectItem parent;
            try
            {
                parent = (EnvDTE.ProjectItem)item.Collection.Parent;
            }
            catch
            {
                continue;
            }
            if (item.FileCodeModel == null) continue;
            if (parent.Name == "Events" && parent.Kind == "{6BB5F8EF-4483-11D3-8BCF-00C04F8EC28C}")
            {
                EnvDTE.FileCodeModel codeModel = item.FileCodeModel;
                foreach(EnvDTE.CodeElement element in GetCodeElementsRecursively(codeModel.CodeElements))
                {
                    if (element.Kind != EnvDTE.vsCMElement.vsCMElementClass)
                        continue;

                    ret.Add(element.Name, (EnvDTE.CodeClass)element);
                }
                //WriteLine(codeModel.CodeElements.Count.ToString());
                //WriteLine(codeModel.ToString());
                //WriteLine(item.Name);
            }
        }
        return ret;
    }

    public List<EnvDTE.ProjectItem> GetProjectItemsRecursively(EnvDTE.ProjectItems items)
    {
        var ret = new List<EnvDTE.ProjectItem>();
        if (items == null) return ret;
        foreach(EnvDTE.ProjectItem item in items)
        {
            ret.Add(item);
            ret.AddRange(GetProjectItemsRecursively(item.ProjectItems));
        }
        return ret;
    }

    public List<EnvDTE.CodeElement> GetCodeElementsRecursively(EnvDTE.CodeElements elements)
    {
        var ret = new List<EnvDTE.CodeElement>();
        if (elements == null) return ret;
        foreach(EnvDTE.CodeElement element in elements)
        {
            ret.Add(element);
            ret.AddRange(GetCodeElementsRecursively(element.Children));
        }
        return ret;
    }
#>